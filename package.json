{
  "name": "weboptimizer",
  "version": "2.0.1132",
  "description": "A generic web optimizer, (module) bundler and development environment.",
  "keywords": [
    "webpack",
    "optimizer",
    "configuration",
    "generic",
    "lint",
    "bundle",
    "test",
    "document",
    "mock"
  ],
  "homepage": "https://torben.website/weboptimizer",
  "bugs": {
    "email": "info@torben.website",
    "url": "https://github.com/thaibault/weboptimizer/issues"
  },
  "license": "CC-BY-3.0",
  "author": {
    "name": "Torben Sickert",
    "email": "info@torben.website",
    "url": "https://torben.website"
  },
  "files": [
    "browser.d.ts",
    "browser.js",
    "configurator.d.ts",
    "configurator.js",
    "declarations.d.ts",
    "ejsLoader.d.ts",
    "ejsLoader.js",
    "helper.d.ts",
    "helper.js",
    "index.d.ts",
    "index.html.ejs",
    "index.js",
    "jest.json",
    "jestEnvironmentBrowser.d.ts",
    "jestEnvironmentBrowser.js",
    "stylelintConfigurator.d.ts",
    "stylelintConfigurator.js",
    "tsconfig.json",
    "tsconfigApplication.json",
    "tsconfigLibrary.json",
    "type.d.ts",
    "type.js",
    "webpackConfigurator.d.ts",
    "webpackConfigurator.js"
  ],
  "bin": {
    "weboptimizer": "index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thaibault/weboptimizer.git"
  },
  "scripts": {
    "build": "yarn build:types; yarn build:plain",
    "build:plain": "command=\"babel --extensions '.ts' --plugins @babel/plugin-proposal-class-properties,@babel/plugin-syntax-top-level-await,@babel/plugin-transform-runtime,babel-plugin-transform-modern-regexp --presets @babel/preset-env,@babel/preset-typescript --out-file\" && $command browser.js browser.ts && $command configurator.js configurator.ts && $command ejsLoader.js ejsLoader.ts && $command helper.js helper.ts && $command index.js index.ts && $command jestEnvironmentBrowser.js jestEnvironmentBrowser.ts && $command stylelintConfigurator.js stylelintConfigurator.ts && $command type.js type.ts && $command webpackConfigurator.js webpackConfigurator.ts && shx chmod +x index.js && shx sed -i 's/(#!\\\\/usr\\\\/bin\\\\/env )babel-(node)/$1$2/' index.js 1>/dev/null",
    "build:test": "yarn clear && yarn build:plain && command='babel --extensions '.ts' --plugins @babel/plugin-proposal-class-properties,@babel/plugin-syntax-top-level-await,@babel/plugin-transform-runtime --presets @babel/preset-env,@babel/preset-typescript --source-root ../ --out-file' && cd test/simple && yarn; cd ../../ && cd test/scss && yarn; cd ../../ && rimraf node_modules/weboptimizer test/simple/node_modules/weboptimizer test/scss/node_modules/weboptimizer && shx mkdir -p node_modules/weboptimizer test/simple/node_modules/weboptimizer test/scss/node_modules/weboptimizer && copyCommand='shx cp *.ts *.js *.json *.ejs' && $copyCommand node_modules/weboptimizer/ && $copyCommand test/simple/node_modules/weboptimizer/ && $copyCommand test/scss/node_modules/weboptimizer/ && $command test/browser.js test/browser.ts && $command test/configurator.js test/configurator.ts && $command test/helper.js test/helper.ts && $command test/ejsLoader.js test/ejsLoader.ts && $command test/stylelintConfigurator.js test/stylelintConfigurator.ts && $command test/index.js test/index.ts && $command test/webpackConfigurator.js test/webpackConfigurator.ts",
    "build:test:source-map": "yarn clear && yarn build:plain && command='babel --extensions '.ts' --plugins @babel/plugin-proposal-class-properties,@babel/plugin-syntax-top-level-await,@babel/plugin-transform-runtime --presets @babel/preset-env,@babel/preset-typescript --source-maps inline --source-root ../ --out-file' && rimraf node_modules/weboptimizer && shx mkdir -p node_modules/weboptimizer && shx cp *.ts *.js *.json *.ejs node_modules/weboptimizer/ && $command test/browser.js test/browser.ts && $command test/configurator.js test/configurator.ts && $command test/helper.js test/helper.ts && $command test/ejsLoader.js test/ejsLoader.ts && $command test/stylelintConfigurator.js test/stylelintConfigurator.ts && $command test/index.js test/index.ts && $command test/webpackConfigurator.js test/webpackConfigurator.ts",
    "build:types": "tsc --emitDeclarationOnly",
    "check": "yarn check:types; yarn lint",
    "check:types": "tsc --noEmit",
    "clear": "rimraf apiDocumentation browser.d.ts configurator.d.ts ejsLoader.d.ts helper.d.ts index.d.ts jestEnvironmentBrowser.d.ts stylelintConfigurator.d.ts type.d.ts webpackConfigurator.d.ts *.js *.compiled.* *.compiled test/*.js test/*.compiled.* test/*.d.ts *.html *.log node_modules/weboptimizer .coverage .nyc_output || true",
    "document": "yarn build:plain && jsdoc --package ./package.json --readme ./readme.md --destination apiDocumentation *.js",
    "prettify": "yarn lint:base --fix || true",
    "lint": "yarn lint:base",
    "lint:base": "eslint --ignore-pattern '*.compiled.*' --ignore-pattern '*.d.ts' --ignore-pattern '*.js' --parser-options=project:tsconfig.json '*.ts' 'test/*.ts'",
    "prepare": "yarn build",
    "test": "yarn build:test && jest --config ./jest.json --root-dir './' --test-regex '/test/.+\\\\.js$' test/browser.js test/configurator.js test/helper.js test/ejsLoader.js test/stylelintConfigurator.js test/index.js test/webpackConfigurator.js",
    "test:coverage": "yarn test --ci --coverage --coverageReporters=text --coverageReporters=text-summary --silent --testLocationInResults",
    "test:coverage:report": "yarn test:coverage --coverageDirectory=.coverage --coverageReporters=lcov --outputFile=lcov.info",
    "test:watch": "yarn test --watch",
    "test:watch:all": "yarn test --watchAll",
    "update": "yarn version --patch && yarn publish",
    "update:documentation": "documentationWebsite --log-level info"
  },
  "dependencies": {
    "@babel/core": "*",
    "@babel/plugin-proposal-decorators": "*",
    "@babel/plugin-transform-runtime": "*",
    "@babel/preset-env": "*",
    "@babel/preset-typescript": "*",
    "@babel/runtime": "*",
    "@types/webpack": "https://registry.yarnpkg.com/@favware/skip-dependency/-/skip-dependency-1.1.1.tgz",
    "babel-loader": "*",
    "babel-plugin-transform-modern-regexp": "*",
    "babel-preset-minify": "*",
    "clientnode": "*",
    "ejs": "*",
    "exports-loader": "*",
    "extract-loader": "*",
    "html-loader": "*",
    "html-minifier": "*",
    "html-webpack-plugin": "*",
    "imports-loader": "*",
    "jsdom": "^16.6.0",
    "rimraf": "*",
    "script-loader": "*",
    "typescript": "*",
    "webpack": "*",
    "webpack-cli": "*",
    "webpack-sources": "*"
  },
  "devDependencies": {
    "@babel/cli": "*",
    "@babel/eslint-parser": "*",
    "@types/cssnano": "*",
    "@types/ejs": "*",
    "@types/favicons": "*",
    "@types/html-minifier": "*",
    "@types/html-minifier-terser": "*",
    "@types/imagemin": "*",
    "@types/jest": "*",
    "@types/jsdom": "*",
    "@types/mini-css-extract-plugin": "*",
    "@types/node": "*",
    "@types/postcss-import": "*",
    "@types/postcss-url": "*",
    "@types/rimraf": "*",
    "@types/webpack-env": "*",
    "@types/webpack-sources": "*",
    "@typescript-eslint/eslint-plugin": "*",
    "@typescript-eslint/parser": "*",
    "css-loader": "*",
    "cssnano": "*",
    "documentation-website": "*",
    "eslint": "7.*",
    "eslint-config-google": "*",
    "eslint-plugin-jsdoc": "*",
    "favicons": "*",
    "favicons-webpack-plugin": "*",
    "image-minimizer-webpack-plugin": "*",
    "jest": "*",
    "jsdoc": "*",
    "mini-css-extract-plugin": "*",
    "mkdirp": "*",
    "node-fetch": "*",
    "postcss": "*",
    "postcss-fontpath": "*",
    "postcss-import": "*",
    "postcss-loader": "*",
    "postcss-preset-env": "*",
    "postcss-sprites": "*",
    "postcss-url": "*",
    "shx": "*",
    "style-loader": "*",
    "stylelint": "*",
    "stylelint-config-standard": "*",
    "typescript-plugin-css-modules": "*",
    "workbox-webpack-plugin": "*"
  },
  "peerDependencies": {
    "@babel/eslint-parser": "*",
    "@babel/preset-react": "*",
    "@types/ejs": "*",
    "@types/favicons": "*",
    "@types/html-minifier": "*",
    "@types/imagemin": "*",
    "@types/jest": "*",
    "@types/jsdom": "*",
    "@types/mini-css-extract-plugin": "*",
    "@types/node": "*",
    "@types/webpack-env": "*",
    "@typescript-eslint/eslint-plugin": "*",
    "@typescript-eslint/parser": "*",
    "css-loader": "*",
    "cssnano": "*",
    "eslint": "*",
    "eslint-config-google": "*",
    "eslint-plugin-jsdoc": "*",
    "favicons-webpack-plugin": "*",
    "identity-obj-proxy": "*",
    "image-minimizer-webpack-plugin": "*",
    "imagemin": "*",
    "jest": "*",
    "jsdoc": "*",
    "mini-css-extract-plugin": "*",
    "postcss": "*",
    "postcss-fontpath": "*",
    "postcss-import": "*",
    "postcss-loader": "*",
    "postcss-preset-env": "*",
    "postcss-sprites": "*",
    "postcss-url": "*",
    "style-loader": "*",
    "stylelint": "*",
    "stylelint-config-standard": "*",
    "typescript-plugin-css-modules": "*",
    "webpack-dev-server": "*",
    "workbox-webpack-plugin": "*"
  },
  "peerDependenciesMeta": {
    "@babel/eslint-parser": {
      "optional": true
    },
    "@babel/preset-react": {
      "optional": true
    },
    "@types/ejs": {
      "optional": true
    },
    "@types/favicons": {
      "optional": true
    },
    "@types/html-minifier": {
      "optional": true
    },
    "@types/jest": {
      "optional": true
    },
    "@types/jsdom": {
      "optional": true
    },
    "@types/node": {
      "optional": true
    },
    "@types/webpack-env": {
      "optional": true
    },
    "@typescript-eslint/eslint-plugin": {
      "optional": true
    },
    "@typescript-eslint/parser": {
      "optional": true
    },
    "css-loader": {
      "optional": true
    },
    "cssnano": {
      "optional": true
    },
    "eslint": {
      "optional": true
    },
    "eslint-config-google": {
      "optional": true
    },
    "eslint-plugin-jsdoc": {
      "optional": true
    },
    "favicons-webpack-plugin": {
      "optional": true
    },
    "identity-obj-proxy": {
      "optional": true
    },
    "image-minimizer-webpack-plugin": {
      "optional": true
    },
    "jest": {
      "optional": true
    },
    "jsdoc": {
      "optional": true
    },
    "mini-css-extract-plugin": {
      "optional": true
    },
    "postcss-fontpath": {
      "optional": true
    },
    "postcss-import": {
      "optional": true
    },
    "postcss-loader": {
      "optional": true
    },
    "postcss-preset-env": {
      "optional": true
    },
    "postcss-sprites": {
      "optional": true
    },
    "postcss-url": {
      "optional": true
    },
    "style-loader": {
      "optional": true
    },
    "stylelint": {
      "optional": true
    },
    "stylelint-config-standard": {
      "optional": true
    },
    "typescript-plugin-css-modules": {
      "optional": true
    },
    "webpack-dev-server": {
      "optional": true
    },
    "workbox-webpack-plugin": {
      "optional": true
    }
  },
  "engines": {
    "node": ">=17",
    "npm": ">=7"
  },
  "resolutions": {
    "@types/webpack": "https://registry.yarnpkg.com/@favware/skip-dependency/-/skip-dependency-1.1.1.tgz",
    "colors": "1.4.0"
  },
  "sideEffects": true,
  "documentationWebsite": {
    "name": "weboptimizer",
    "trackingCode": "UA-40192634-11"
  },
  "configuration": {
    "default": {
      "assetPattern": {
        "javaScript": {
          "excludeFilePathRegularExpression": {
            "#": "Only ensure globals for exported modules.",
            "__evaluate__": "`^(?:.*/)?(?:developmentHelper|errorreporter|.+\\\\.html|preboot|vendor${self.debug && !self.generic.isWeb && resolve(self.inPlace.externalLibrary.normal) ? '|index' : ''})(?:\\\\.compiled)?\\\\.js$`"
          },
          "includeFilePathRegularExpression": "^.*$",
          "pattern": {
            "__evaluate__": "`${self.generic.assetPattern.javaScript.pattern}if(typeof window==='undefined'||window===null)var window=(typeof global==='undefined'||global===null)?{}:global;{1}`"
          }
        }
      },
      "buildContext": {
        "definitions": {
          "CONTEXT_TYPE": {
            "__evaluate__": "`'${self.contextType}'`"
          },
          "DEBUG": {
            "__evaluate__": "self.debug"
          },
          "EXTERNAL_EXPORT_FORMAT": {
            "__evaluate__": "`'${self.exportFormat.external}'`"
          },
          "NAME": {
            "__evaluate__": "`'${self.name}'`"
          },
          "OFFLINE": {
            "__evaluate__": "Boolean(self.offline)"
          },
          "PRERENDER": false,
          "SELF_EXPORT_FORMAT": {
            "__evaluate__": "`'${self.exportFormat.self}'`"
          },
          "TARGET_TECHNOLOGY": {
            "__evaluate__": "`'${self.targetTechnology.payload}'`"
          },
          "UTC_BUILD_TIMESTAMP": {
            "__evaluate__": "nowUTCTimestamp"
          }
        },
        "types": {
          "default": {
            "filePathPattern": {
              "__evaluate__": "`^${Tools.stringGetRegularExpressionValidated(self.path.target.asset.javaScript)}.+(?:\\\\.[^.]+(?:\\\\.map)?)?\\\\.js$`"
            },
            "outputExtension": "js",
            "preinstall": {
              "#": "Create dummy file before building to let build artefacts created on install correctly be set their needed executable bits.",
              "__evaluate__": "`touch '\\${path.resolve(self.path.target.asset[buildConfiguration.type], path.basename(filePath, \\`.\\${buildConfiguration.extension}\\`))}.\\${buildConfiguration.outputExtension}'`"
            }
          },
          "typeScript": {
            "extension": "ts",
            "ignoredExtension": "d.ts"
          },
          "typeScriptExtension": {
            "extension": "tsx",
            "ignoredExtension": "d.ts"
          },
          "javaScript": {
            "extension": "js"
          },
          "javaScriptExtension": {
            "extension": "jsx"
          },
          "cascadingStyleSheet": {
            "extension": "css",
            "filePathPattern": {
              "__evaluate__": "`^${Tools.stringGetRegularExpressionValidated(self.path.target.asset.cascadingStyleSheet)}.+${self.path.target.asset.cascadingStyleSheet === self.path.source.asset.cascadingStyleSheet ? '\\\\.compiled' : ''}(?:\\\\.[^.]+(?:\\\\.map)?)?$`"
            },
            "outputExtension": "css"
          },
          "additional": {
            "filePathPattern": "^.+\\.((bundle)|(compiled))(?:\\.map)?$",
            "outputExtension": ""
          }
        }
      },
      "commandLine": {
        "#": "Configures how to trigger corresponding project livecycle tasks from the command line.",
        "build": {
          "arguments": [
            "--config",
            {
              "__evaluate__": "`${webOptimizerPath}/webpackConfigurator.js`"
            },
            "--progress"
          ],
          "command": "webpack"
        },
        "build:types": {
          "arguments": [
            "--emitDeclarationOnly",
            "--project",
            {
              "__evaluate__": "Tools.isFileSync(path.resolve(currentPath, 'tsconfig.json')) ? path.resolve(currentPath, 'tsconfig.json') : `${webOptimizerPath}/tsconfigApplication.json`"
            }
          ],
          "command": "tsc"
        },
        "check:types": {
          "arguments": [
            "--noEmit",
            "--project",
            {
              "__evaluate__": "Tools.isFileSync(path.resolve(currentPath, 'tsconfig.json')) ? path.resolve(currentPath, 'tsconfig.json') : `${webOptimizerPath}/tsconfigApplication.json`"
            }
          ],
          "command": "tsc"
        },
        "document": {
          "arguments": [
            "--package",
            "./package.json",
            "--readme",
            "./readme.md",
            "--destination",
            {
              "__evaluate__": "self.path.apiDocumentation"
            },
            {
              "__evaluate__": "`'${self.path.target.asset.javaScript}'*.ts`"
            }
          ],
          "command": "jsdoc",
          "indicator": "self.needed.javaScript || self.needed.typeScript"
        },
        "lint": [
          {
            "arguments": [
              {
                "__evaluate__": "path.resolve(self.path.source.asset.cascadingStyleSheet, '**/*.css')"
              },
              "--config",
              {
                "__evaluate__": "path.relative(self.path.context, path.resolve(webOptimizerPath, 'stylelintConfigurator.js'))"
              }
            ],
            "command": "stylelint",
            "indicator": "self.needed.cascadingStyleSheet"
          },
          {
            "arguments": [
              "--config",
              {
                "__evaluate__": "`'${webOptimizerPath}/package.json'`"
              },
              "--ignore-pattern",
              {
                "__evaluate__": "`'${self.path.target.base.substring(currentPath.length + 1) ? path.relative(currentPath, self.path.target.base, '**') : \"*.((bundle)|(compiled)).*\"}'`"
              },
              "--ignore-pattern",
              {
                "__evaluate__": "`'${self.path.apiDocumentation}'`"
              },
              "--ignore-pattern",
              "'**/.git/*'",
              "--ignore-pattern",
              "'**/.cache/*'",
              "--ignore-pattern",
              "'**/.config/*'",
              "--ignore-pattern",
              "'**/.npm/*'",
              "--ignore-pattern",
              "'**/log/*'",
              "--ignore-pattern",
              "'**/node_modules/*'",
              "--ignore-pattern",
              "'**/backup/*'",
              "--ignore-pattern",
              "'**/plugins/*'",
              "--ignore-pattern",
              "'*.d.ts'",
              "--resolve-plugins-relative-to",
              ".",
              "'**/*.{jsx,ts,tsx}'"
            ],
            "command": "eslint",
            "indicator": "self.needed.javaScript || self.needed.typeScript"
          }
        ],
        "serve": {
          "arguments": [
            "serve",
            "--config",
            {
              "__evaluate__": "`'${webOptimizerPath}/webpackConfigurator.js'`"
            },
            "--progress"
          ],
          "command": "webpack"
        },
        "test": {
          "environments": {
            "__evaluate__": "['node'].concat(self.generic.isWeb ? 'jsdom' : [])"
          },
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} '/test/.+\\.js$' --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        },
        "test:browser": {
          "__evaluate__": "self.commandLine.serve"
        },
        "test:coverage": {
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} '/test/.+\\.js$' ${self.generic.testCommandLineCoverageArguments} --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        },
        "test:coverage:report": {
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} '/test/.+\\.js$' ${self.generic.testCommandLineCoverageArguments} --coverageDirectory=.coverage --coverageReporters=lcov --outputFile=lcov.info --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        }
      },
      "contextType": "main",
      "debug": false,
      "development": {
        "server": {
          "client": false,
          "compress": {
            "__evaluate__": "!self.debug"
          },
          "historyApiFallback": true,
          "host": "0.0.0.0",
          "hot": {
            "#": "Indicates whether to activate the developments hot module replacement feature.",
            "__evaluate__": "self.debug"
          },
          "liveReload": true,
          "port": 8080,
          "server": "http",
          "static": [
            {
              "directory": {
                "__evaluate__": "self.path.target.base"
              },
              "watch": true
            },
            {
              "directory": {
                "__evaluate__": "path.resolve(self.path.base, self.module.directoryNames[0])"
              },
              "watch": true
            }
          ],
          "watchFiles": {
            "__evaluate__": "self.webpack.watchOptions ? {options: self.webpack.watchOptions} : {}"
          }
        },
        "tool": false
      },
      "document": {
        "inPlace": {
          "externalLibrary": {
            "normal": false
          }
        },
        "module": {
          "optimizer": {
            "cssnano": null
          }
        }
      },
      "encoding": "utf-8",
      "exportFormat": {
        "external": "umd",
        "globalObject": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? 'window' : 'this'"
        },
        "self": "umd"
      },
      "extensions": {
        "file": {
          "external": {
            "__evaluate__": "self.generic.isWeb ? self.extensions.file.internal : ['.compiled.js', '.js', '.json', '.mjs']"
          },
          "internal": [
            ".compiled.js",
            ".mjs",
            ".js",
            ".jsx",
            ".ts",
            ".tsx",
            ".json",
            ".sass",
            ".scss",
            ".compiled.css",
            ".css",
            ".eot",
            ".gif",
            ".html",
            ".ico",
            ".jpg",
            ".png",
            ".svg",
            ".ttf",
            ".woff",
            ".woff2",
            ".html.ejs",
            ".ejs"
          ]
        }
      },
      "favicon": {
        "background": "white",
        "emitStats": false,
        "icons": {
          "android": true,
          "appleIcon": true,
          "appleStartup": true,
          "coast": true,
          "favicons": true,
          "firefox": true,
          "opengraph": true,
          "twitter": true,
          "windows": true,
          "yandex": true
        },
        "inject": true,
        "logo": {
          "__evaluate__": "self.path.source.asset.favicon"
        },
        "persistentCache": true,
        "prefix": {
          "__evaluate__": "`${path.relative(self.path.target.base, path.resolve(self.path.target.asset.image, 'favicons-[chunkhash]'))}/`"
        },
        "statsFilename": "iconStats.json",
        "title": {
          "__evaluate__": "self.name"
        }
      },
      "files": {
        "additionalPaths": [
          "crossdomain.xml",
          "favicon.ico",
          "humans.txt",
          "license.txt",
          "robots.txt",
          "404.html",
          ".htaccess"
        ],
        "compose": {
          "cascadingStyleSheet": {
            "__evaluate__": "self.debug || self.generic.isWeb ? `${path.resolve(self.path.target.asset.cascadingStyleSheet, '[name].css')}?${self.hashAlgorithm}=[chunkhash]` : null"
          },
          "image": {
            "__evaluate__": "self.debug ? null : path.resolve(self.path.target.asset.image, 'sprite.png')"
          },
          "javaScript": {
            "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, '[name]')}.js?${self.hashAlgorithm}=[chunkhash]`"
          }
        },
        "defaultHTML": {
          "chunksSortMode": "auto",
          "filename": "index.html",
          "hash": true,
          "inject": "body",
          "minify": {
            "__evaluate__": "self.module.optimizer.htmlMinifier ? self.module.optimizer.htmlMinifier : false"
          },
          "template": {
            "filePath": {
              "__evaluate__": "`${Tools.isFileSync(path.resolve(self.path.source.base, 'index.html.ejs')) ? path.resolve(self.path.source.base, 'index.html.ejs') : path.resolve(webOptimizerPath, 'index.html.ejs')}`"
            },
            "postCompileOptions": {
              "compileSteps": 0
            },
            "use": [
              {
                "loader": {
                  "__evaluate__": "self.module.html.loader"
                },
                "options": {
                  "__evaluate__": "self.module.html.options"
                }
              },
              {
                "loader": {
                  "__evaluate__": "self.module.preprocessor.html.loader"
                },
                "options": {
                  "compiler": {
                    "__evaluate__": "self.module.preprocessor.ejs.options.compiler"
                  },
                  "compress": {
                    "__evaluate__": "self.module.preprocessor.ejs.options.compress"
                  },
                  "context": {
                    "__evaluate__": "self.path.context"
                  },
                  "extensions": {
                    "__evaluate__": "self.extensions"
                  },
                  "locals": {
                    "__evaluate__": "self.module.preprocessor.ejs.options.locals"
                  },
                  "module": {
                    "__evaluate__": "self.module.preprocessor.ejs.options.module"
                  },
                  "compileSteps": 2
                }
              }
            ]
          },
          "title": {
            "__evaluate__": "self.name"
          }
        },
        "html": [
          {}
        ]
      },
      "generic": {
        "assetPattern": {
          "javaScript": {
            "#": "We have to ensure, that the highest resolvable dependency inside this project will be used in node environments to ensure one instance of each dependent artefact for linked projects. We have to wrap \"require\" into an eval call to avoid other pre-processing scripts to replace this statement here.",
            "pattern": "'use strict';if(typeof module!=='undefined'&&module!==null&&eval('typeof require')!=='undefined'&&eval('require')!==null&&'main'in eval('require')&&eval('typeof require.main')!=='undefined'&&eval('require.main')!==null){var ORIGINAL_MAIN_MODULE=module;if(module!==eval('require.main')&&'paths'in module&&'paths'in eval('require.main')&&typeof __dirname!=='undefined'&&__dirname!==null)module.paths=eval('require.main.paths').concat(module.paths.filter(function(path){return eval('require.main.paths').includes(path)}))};"
          }
        },
        "isWeb": true,
        "supportedBrowsers": [
          "last 2 versions",
          "> 5%"
        ],
        "testCommandLine": "jest --config node_modules/weboptimizer/jest.json --test-regex",
        "testCommandLineCoverageArguments": "--ci --coverage --coverage-reporters=text --coverage-reporters=text-summary --silent --test-location-in-results"
      },
      "givenCommandLineArguments": [],
      "hashAlgorithm": "md5",
      "injection": {
        "autoExclude": [
          "./declarations.d.ts",
          "./dummy",
          "./dummyPlugin",
          "./test",
          "./test.js",
          "./test.ts",
          "./type",
          "./type.js",
          "./type.ts",
          ".coverage"
        ],
        "chunks": {},
        "entry": {
          "index": "__auto__"
        },
        "external": {
          "aliases": {
            "jquery": {
              "root": "jQuery"
            },
            "^.+/node_modules/.+(?:\\.css)?$": {
              "^(.+)(?:\\.css)?$": "?$1.compiled.css"
            },
            "^.+/node_modules/.+(?:\\.js)?$": {
              "^(.+)(?:\\.js)?$": "?$1.compiled.js"
            }
          },
          "implicit": {
            "pattern": {
              "exclude": [
                {
                  "__evaluate__": "/^\\./"
                },
                "#: Usually we need to pre-process these artefacts against target technology specific environment.",
                {
                  "__evaluate__": "/^weboptimizer\\/browser(?:\\.js)?$/"
                },
                {
                  "__evaluate__": "/(?:^|\\/)webpack(?:$|\\/)/"
                }
              ],
              "include": []
            }
          },
          "modules": "__implicit__"
        },
        "ignorePattern": []
      },
      "inPlace": {
        "#": "Indicates whether to include the corresponding artefacts into build target artefact or reference them to dynamically include them during runtime.",
        "cascadingStyleSheet": {
          "head": ".+"
        },
        "externalLibrary": {
          "dynamic": true,
          "normal": true
        },
        "javaScript": {
          "head": "(^|/)errorreporter(/index)?\\.js([?#]|$)"
        },
        "otherMaximumFileSizeLimitInByte": 40960
      },
      "library": true,
      "loader": {
        "aliases": {
          "ejs-loader": "weboptimizer/ejsLoader"
        },
        "extensions": {
          "file": [
            ".compiled.js",
            ".mjs",
            ".js"
          ]
        },
        "directoryNames": [
          "node_modules"
        ],
        "resolveSymlinks": false
      },
      "module": {
        "additional": {
          "post": [],
          "pre": []
        },
        "aliases": {
          "#": "Local references to avoid relative paths in complex file structures.",
          "@asset": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base)))"
          },
          "@cascadingStyleSheet": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.cascadingStyleSheet)))"
          },
          "@data": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.data)))"
          },
          "@font": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.font)))"
          },
          "@image": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.image)))"
          },
          "@javaScript": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.javaScript)))"
          },
          "@root": {
            "__evaluate__": "path.join('/', path.relative(self.path.context, self.path.base))"
          },
          "@source": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base)))"
          },
          "@template": {
            "__evaluate__": "path.join('/', path.relative(self.path.base, path.resolve(self.path.base, self.path.source.base, self.path.source.asset.base, self.path.source.asset.template)))"
          }
        },
        "cascadingStyleSheet": {
          "exclude": null,
          "include": null,
          "loader": "css-loader",
          "options": {
            "esModule": false,
            "modules": {
              "auto": true,
              "getLocalIdent": {
                "__evaluate__": "(context, localIdentName, localName, options) => options.namedExport ? `${localName}ClassName` : localName"
              },
              "localIdentName": "[local]",
              "mode": "local",
              "namedExport": false
            }
          }
        },
        "directoryNames": [
          "node_modules"
        ],
        "enforceDeduplication": {
          "__evaluate__": "!self.module.resolveSymlinks"
        },
        "html": {
          "additional": {
            "post": [],
            "pre": []
          },
          "exclude": null,
          "loader": "html-loader",
          "options": {
            "minimize": {
              "__evaluate__": "self.module.optimizer.htmlMinifier || false"
            },
            "sources": {
              "list": [
                "..."
              ],
              "urlFilter": {
                "__evaluate__": "(attributeName, reference) => !reference.endsWith('.js')"
              }
            }
          }
        },
        "optimizer": {
          "babelMinify": {
            "bundle": {
              "plugin": {
                "parserOpts": {
                  "strictMode": false
                }
              },
              "transform": {
                "removeConsole": true,
                "removeDebugger": true,
                "mangle": {
                  "topLevel": {
                    "#": "Indicates to not mangle scope names from the entry (main) scope in libraries.",
                    "__evaluate__": "!self.library"
                  }
                }
              }
            },
            "module": {
              "removeConsole": true,
              "removeDebugger": true
            }
          },
          "cssnano": {
            "#": "The autoprefixer has to be disabled in this context since it would remove all needed vendor prefixes from the preceding processing (every prefix should be needed here).",
            "autoprefixer": false,
            "discardUnused": {
              "__evaluate__": "!self.library"
            }
          },
          "data": {
            "exclude": null,
            "loader": []
          },
          "font": {
            "eot": {
              "exclude": null,
              "loader": []
            },
            "svg": {
              "exclude": null,
              "loader": []
            },
            "ttf": {
              "exclude": null,
              "loader": []
            },
            "woff": {
              "exclude": null,
              "loader": []
            }
          },
          "htmlMinifier": {
            "caseSensitive": true,
            "collapseBooleanAttributes": true,
            "collapseInlineTagWhitespace": false,
            "collapseWhitespace": true,
            "conservativeCollapse": false,
            "html5": true,
            "ignoreCustomComments": {
              "__evaluate__": "[/^{?generic-inject-application$/i, /^generic-inject-application}$/i]"
            },
            "ignoreCustomFragments": {
              "__evaluate__": "[/<%[\\s\\S]*?%>/, /<\\?[\\s\\S]*?\\?>/, /<link[^>]*>/, /<img[^>]*>/, ]"
            },
            "includeAutoGeneratedTags": false,
            "keepClosingSlash": false,
            "maxLineLength": {
              "__evaluate__": "Infinity"
            },
            "minifyCSS": true,
            "minifyJS": true,
            "minifyURLs": false,
            "preserveLineBreaks": false,
            "#": "NOTE: Needed for attribute nested quotes which should be escaped.",
            "preventAttributesEscaping": true,
            "processScripts": [],
            "processConditionalComments": false,
            "quoteCharacter": "\"",
            "removeAttributeQuotes": false,
            "removeComments": true,
            "removeCommentsFromCDATA": true,
            "removeCDATASectionsFromCDATA": true,
            "removeEmptyAttributes": false,
            "removeEmptyElements": false,
            "removeOptionalTags": false,
            "removeRedundantAttributes": true,
            "removeScriptTypeAttributes": true,
            "removeStyleLinkTypeAttributes": true,
            "removeTagWhitespace": false,
            "sortAttributes": true,
            "sortClassName": true,
            "useShortDoctype": false
          },
          "image": {
            "content": {
              "minimizer": {
                "options": {
                  "plugins": [
                    [
                      "gifsicle",
                      {
                        "colors": 256,
                        "interlanced": false,
                        "optimizationLevel": 3
                      }
                    ],
                    [
                      "jpegtran",
                      {
                        "arithmetic": true,
                        "progressive": true
                      }
                    ],
                    [
                      "optipng",
                      {
                        "optimizationLevel": 7
                      }
                    ],
                    [
                      "svgo",
                      {
                        "plugins": []
                      }
                    ]
                  ]
                }
              },
              "exclude": {
                "__evaluate__": "self.debug || 2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] !== 'build' ? /.*/ : self.debug && console.warn(`Image compression disabled. Use configuration: \"{module:{optimizer:{image:{content:{exclude:undefined}}}}}\" to enable default image file including.`) || /.*/"
              }
            },
            "loader": []
          },
          "minimize": true
        },
        "preprocessor": {
          "cascadingStyleSheet": {
            "additional": {
              "plugins": {
                "post": [],
                "pre": [
                  [
                    "postcss-preset-env",
                    {
                      "browsers": {
                        "__evaluate__": "self.generic.supportedBrowsers"
                      },
                      "stage": 0
                    }
                  ]
                ]
              },
              "post": [],
              "pre": []
            },
            "loader": {
              "__evaluate__": "optionalRequire('postcss-loader') ? 'postcss-loader' : null"
            },
            "options": {}
          },
          "ejs": {
            "additional": {
              "post": [],
              "pre": []
            },
            "exclude": null,
            "loader": "ejs-loader",
            "options": {
              "compiler": {
                "cache": true,
                "compileDebug": false,
                "debug": false,
                "strict": true,
                "_with": false
              },
              "compress": {
                "html": {
                  "__evaluate__": "self.module.optimizer.htmlMinifier"
                },
                "javaScript": {
                  "__evaluate__": "self.module.optimizer.babelMinify.module"
                }
              },
              "context": {
                "__evaluate__": "self.path.context"
              },
              "extensions": {
                "__evaluate__": "self.extensions"
              },
              "locals": {},
              "module": {
                "aliases": {
                  "__evaluate__": "self.module.aliases"
                },
                "replacements": {
                  "__evaluate__": "self.module.replacements"
                }
              },
              "compileSteps": 2
            }
          },
          "html": {
            "additional": {
              "post": [],
              "pre": []
            },
            "exclude": {
              "__evaluate__": "self.module.preprocessor.ejs.exclude"
            },
            "loader": {
              "__evaluate__": "self.module.preprocessor.ejs.loader"
            },
            "options": {
              "compiler": {
                "__evaluate__": "self.module.preprocessor.ejs.options.compiler"
              },
              "compress": {
                "__evaluate__": "self.module.preprocessor.ejs.options.compress"
              },
              "context": {
                "__evaluate__": "self.path.context"
              },
              "extensions": {
                "__evaluate__": "self.extensions"
              },
              "locals": {
                "__evaluate__": "self.module.preprocessor.ejs.options.locals"
              },
              "module": {
                "__evaluate__": "self.module.preprocessor.ejs.options.module"
              },
              "compileSteps": 2
            }
          },
          "javaScript": {
            "additional": {
              "post": [],
              "pre": []
            },
            "exclude": "isFilePathInDependencies(filePath)",
            "include": null,
            "loader": "babel-loader",
            "options": {
              "assumptions": {
                "ignoreFunctionLength": true
              },
              "cacheDirectory": true,
              "compact": {
                "__evaluate__": "!self.debug"
              },
              "minified": {
                "__evaluate__": "!self.debug"
              },
              "#": "NOTE: \"@babel/plugin-proposal-nullish-coalescing-operator\" and \"@babel/plugin-proposal-optional-chaining\" is needed to let typescript be able to parse result. \"@babel/plugin-transform-parameters\" is needed caused by a bug when transforming parameters coming from the preceding transformer.",
              "plugins": [
                "@babel/plugin-proposal-nullish-coalescing-operator",
                [
                  "@babel/plugin-proposal-decorators",
                  {
                    "legacy": true
                  }
                ],
                [
                  "@babel/proposal-class-properties",
                  {
                    "loose": true
                  }
                ],
                [
                  "transform-modern-regexp",
                  {
                    "features": [
                      "dotAll",
                      "namedCapturingGroups"
                    ]
                  }
                ],
                "@babel/transform-runtime"
              ],
              "presets": {
                "#": "NOTE: We have to disable module export/import transformation to allow tree shaking by the final (minimizer).",
                "__evaluate__": "[['@babel/preset-env', {loose: true, modules: false, targets: self.generic.isWeb ? {browsers: self.generic.supportedBrowsers, node: 'current'} : {node: 'current'}}], '@babel/preset-typescript'].concat((self.debug || !self.module.optimizer.babelMinify.module || 2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'document') ? [] : [['minify', self.module.optimizer.babelMinify.module]])"
              }
            },
            "regularExpression": "\\.[jt]sx?(?:\\?.*)?$"
          }
        },
        "#": "Defines resources which should be mapped to given variables without referencing them explicitly.",
        "provide": null,
        "replacements": {
          "#": "Defines referenced resources or contexts to be replaced.",
          "context": [],
          "normal": {}
        },
        "#1": "NOTE: Breaks linked files live reloading when disabled.",
        "resolveSymlinks": true,
        "skipParseRegularExpressions": {
          "__evaluate__": "/(?:^|\\/)(?:(?:jquery\\/dist\\/jquery))(?:\\.min)?\\.js(?:\\?.+|$)/"
        },
        "style": {
          "#": "Includes referenced (hot module replaced) css files in-place into the html header to dynamically migrate them on changes without browser refresh.",
          "loader": "style-loader",
          "options": {
            "injectType": "singletonStyleTag",
            "insert": "head"
          }
        }
      },
      "nodeENV": null,
      "nodeEnvironment": {
        "#": "Indicates which node environment variables should be included in built artefacts.",
        "global": true,
        "__filename": "mock",
        "__dirname": "mock"
      },
      "#": "Not yet working in webpack 5 but in webpack 4.",
      "nodeEnvironmentBackup": {
        "console": false,
        "fs": "empty",
        "process": true,
        "Buffer": true,
        "setImmediate": true
      },
      "offline": {
        "common": {
          "exclude": [
            "#: Source mapping files.",
            {
              "__evaluate__": "new RegExp(`^(.*/*)?.+\\.map?(${self.hashAlgorithm}=.*)?$`)"
            },
            "#: Hidden files with leading dot.",
            {
              "__evaluate__": "/^(.*\\/)?\\..*$/"
            }
          ],
          "swDest": "serviceWorker.js"
        },
        "generateServiceWorker": {
          "babelPresetEnvTargets": {
            "__evaluate__": "self.generic.supportedBrowsers"
          },
          "cleanupOutdatedCaches": true,
          "directoryIndex": "index.html",
          "ignoreURLParametersMatching": [
            {
              "__evaluate__": "/^.*$/"
            }
          ],
          "inlineWorkboxRuntime": true,
          "navigateFallback": {
            "__evaluate__": "path.join(self.path.target.public, self.files.defaultHTML.filename)"
          }
        },
        "injectionManifest": {
          "swSrc": "serviceWorker.js"
        },
        "use": "generateServiceWorker"
      },
      "package": {
        "aliasPropertyNames": {
          "__evaluate__": "self.generic.isWeb ? ['browser'] : []"
        },
        "main": {
          "fileNames": [
            "index"
          ],
          "propertyNames": {
            "__evaluate__": "(self.debug ? [] : ['main:aheadOfTimeCompiled']).concat('fesmnext', 'esmnext', 'fesnext', 'esnext', 'fesm2015', 'esm2015', 'fesnext', 'esnext', 'es2015', 'module', 'jsnext').concat(self.generic.isWeb ? 'browser' : []).concat('main')"
          }
        }
      },
      "path": {
        "apiDocumentation": "apiDocumentation/",
        "base": "./",
        "configuration": {
          "javaScript": "./webpack.config.js",
          "json": "./webpack.json",
          "typeScript": "./webpack.config.ts"
        },
        "context": "./",
        "ignore": [
          ".cache",
          ".git",
          {
            "__evaluate__": "self.path.apiDocumentation"
          }
        ],
        "source": {
          "asset": {
            "base": "./",
            "cascadingStyleSheet": "cascadingStyleSheet/",
            "data": "data/",
            "favicon": {
              "__evaluate__": "path.join(self.path.source.asset.image, 'favicon.png')"
            },
            "font": "font/",
            "image": "image/",
            "javaScript": "javaScript/",
            "template": "template/"
          },
          "base": "source/"
        },
        "target": {
          "asset": {
            "base": "./",
            "cascadingStyleSheet": "cascadingStyleSheet/",
            "data": "data/",
            "favicon": {
              "__evaluate__": "path.join(self.path.target.asset.image, 'favicon.png')"
            },
            "font": "font/",
            "image": "image/",
            "javaScript": "javaScript/",
            "template": "template/"
          },
          "base": "build/",
          "manifest": "manifest.appcache",
          "public": ""
        },
        "tidyUp": [
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.bundle.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.compiled.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.bundle.js.map')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.compiled.js.map')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '.__dummy__.js.map')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, 'styles.bundle.js')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.asset.javaScript, 'styles.bundle.js.map')"
          },
          {
            "__evaluate__": "self.files.compose.image ? path.resolve(self.path.source.asset.image, path.relative(self.path.target.asset.image, self.files.compose.image)) : null"
          }
        ],
        "tidyUpGlobs": {
          "options": {
            "glob": {
              "ignore": [
                "node_modules/**/*.css.js",
                "**/node_modules/**/*.css.js"
              ]
            }
          },
          "pattern": [
            {
              "__evaluate__": "path.resolve(self.path.target.base, '*.css.js')"
            },
            {
              "__evaluate__": "path.resolve(self.path.target.base, '**/*.css.js')"
            }
          ]
        },
        "tidyUpOnClear": [
          {
            "__evaluate__": "path.resolve(self.path.target.base, 'yarn-error.log')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.base, '.coverage')"
          },
          {
            "__evaluate__": "path.resolve(self.path.target.base, '.nyc_output')"
          }
        ],
        "tidyUpOnClearGlobs": {
          "options": {
            "glob": {
              "ignore": [
                "node_modules/**/*.d.ts",
                "**/node_modules/**/*.d.ts",
                "**/declarations.d.ts"
              ]
            }
          },
          "pattern": [
            {
              "__evaluate__": "path.resolve(self.path.target.base, '*.d.ts')"
            },
            {
              "__evaluate__": "path.resolve(self.path.target.base, '**/*.d.ts')"
            }
          ]
        }
      },
      "performanceHints": {
        "hints": false
      },
      "plugins": [],
      "showConfiguration": {
        "__evaluate__": "self.debug"
      },
      "stylelint": {
        "extends": "stylelint-config-standard",
        "ignoreFiles": "**/node_modules/*",
        "rules": {
          "at-rule-empty-line-before": [
            "always",
            {
              "except": [
                "after-same-name",
                "first-nested"
              ],
              "ignore": [
                "after-comment",
                "blockless-after-same-name-blockless"
              ]
            }
          ],
          "comment-empty-line-before": "never",
          "declaration-empty-line-before": [
            "always",
            {
              "except": [
                "first-nested"
              ],
              "ignore": [
                "after-comment",
                "after-declaration",
                "inside-single-line-block"
              ]
            }
          ],
          "indentation": 4,
          "selector-class-pattern": [
            "^([a-z][a-z0-9]*)(((--?)|(__))[a-z0-9]+)*$",
            {
              "message": "Expected class selector to follow the \"BEM\" naming."
            }
          ]
        }
      },
      "targetTechnology": {
        "#": "NOTE: Live-reload is not working if target technology is not set to web. Webpack boilerplate code may not support target technologies.",
        "boilerplate": {
          "__evaluate__": "self.generic.supportedBrowsers.map((query) => `browserslist:${query}`)"
        },
        "payload": {
          "__evaluate__": "self.generic.supportedBrowsers"
        }
      },
      "test": {
        "assetPattern": {
          "javaScript": {
            "pattern": {
              "#": "This is how we can make our test artefact executable.",
              "__evaluate__": "`#!/usr/bin/env node\n// -*- coding: utf-8 -*-\n${self.generic.assetPattern.javaScript.pattern}{1}`"
            }
          }
        },
        "exportFormat": {
          "external": "commonjs2",
          "self": "commonjs2"
        },
        "files": {
          "defaultHTML": {
            "filename": "test.html",
            "inject": "head",
            "template": {
              "filePath": {
                "__evaluate__": "`${Tools.isFileSync(path.resolve(self.path.source.base, 'test.html.ejs')) ? path.resolve(self.path.source.base, 'test.html.ejs') : path.resolve(webOptimizerPath, 'index.html.ejs')}`"
              }
            }
          },
          "html": []
        },
        "generic": {
          "isWeb": false
        },
        "module": {
          "optimizer": {
            "babelMinify": {
              "bundle": {
                "transform": {
                  "removeConsole": false
                }
              },
              "module": {
                "removeConsole": false
              }
            }
          }
        },
        "targetTechnology": {
          "boilerplate": "node",
          "payload": "node"
        }
      },
      "test:browser": {
        "files": {
          "defaultHTML": {
            "filename": "test.html",
            "inject": "head",
            "template": {
              "filePath": {
                "__evaluate__": "`${Tools.isFileSync(path.resolve(self.path.source.base, 'test.html.ejs')) ? path.resolve(self.path.source.base, 'test.html.ejs') : path.resolve(webOptimizerPath, 'index.html.ejs')}`"
              }
            }
          }
        },
        "inPlace": {
          "externalLibrary": {
            "normal": true
          }
        },
        "module": {
          "optimizer": {
            "cssnano": null
          }
        },
        "offline": null
      },
      "webpack": {}
    },
    "debug": {
      "debug": true,
      "development": {
        "server": {
          "open": {
            "__evaluate__": "`${path.join(self.path.target.public, self.files.defaultHTML.filename)}`"
          }
        }
      },
      "files": {
        "compose": {
          "javaScript": {
            "__evaluate__": "`${path.resolve(self.path.target.asset.javaScript, '[name].js')}?${self.hashAlgorithm}=[chunkhash]`"
          }
        }
      },
      "inPlace": {
        "cascadingStyleSheet": null,
        "javaScript": null,
        "otherMaximumFileSizeLimitInByte": 1
      },
      "module": {
        "html": {
          "options": {
            "minimize": false
          }
        },
        "optimizer": {
          "cssnano": null,
          "htmlMinifier": null,
          "minimize": false
        },
        "preprocessor": {
          "html": {
            "options": {
              "compiler": {
                "compileDebug": true,
                "debug": true
              }
            }
          }
        }
      }
    },
    "library": {
      "commandLine": {
        "build:types": {
          "arguments": [
            "--emitDeclarationOnly",
            "--project",
            {
              "__evaluate__": "Tools.isFileSync(path.resolve(currentPath, 'tsconfig.json')) ? path.resolve(currentPath, 'tsconfig.json') : `${webOptimizerPath}/tsconfigLibrary.json`"
            }
          ]
        },
        "check:types": {
          "arguments": [
            "--noEmit",
            "--project",
            {
              "__evaluate__": "Tools.isFileSync(path.resolve(currentPath, 'tsconfig.json')) ? path.resolve(currentPath, 'tsconfig.json') : `${webOptimizerPath}/tsconfigLibrary.json`"
            }
          ]
        },
        "test": {
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} 'test.*\\\\.js$' --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        },
        "test:coverage": {
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} 'test.*\\\\.js$' ${self.generic.testCommandLineCoverageArguments} --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        },
        "test:coverage:report": {
          "command": {
            "__evaluate__": "self.commandLine.test.environments.map((environment) => `${self.generic.testCommandLine} 'test.*\\\\.js$' ${self.generic.testCommandLineCoverageArguments} --coverageDirectory=.coverage --coverageReporters=lcov --outputFile=lcov.info --test-environment ${environment} '${path.relative('./', Helper.stripLoader(self.files.compose.javaScript)).replace(/\\.[^/.]+$/, '')}'`).join(' && ')"
          }
        }
      },
      "document": {
        "commandLine": {
          "document": {
            "arguments": [
              "--package",
              "./package.json",
              "--readme",
              "./readme.md",
              "--destination",
              {
                "__evaluate__": "self.path.apiDocumentation"
              },
              {
                "__evaluate__": "path.resolve(self.path.target.asset.javaScript, '*.js')"
              }
            ]
          }
        },
        "exportFormat": {
          "self": "var"
        },
        "generic": {
          "isWeb": false
        },
        "targetTechnology": {
          "boilerplate": "node",
          "payload": "node"
        }
      },
      "exportFormat": {
        "self": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? 'var' : 'umd'"
        }
      },
      "files": {
        "compose": {
          "cascadingStyleSheet": {
            "__evaluate__": "self.debug && 2 < self.givenCommandLineArguments.length && ['serve', 'test:browser'].includes(self.givenCommandLineArguments[2]) ? null : ({chunk: {name}}) => `${path.relative(self.path.target.base, path.resolve(self.path.target.asset.cascadingStyleSheet, `${path.basename(name, '.css')}${self.path.target.asset.cascadingStyleSheet === self.path.source.asset.cascadingStyleSheet ? '.compiled' : ''}.css`))}?${self.hashAlgorithm}=[chunkhash]`"
          }
        },
        "defaultHTML": {
          "filename": "playground.html",
          "inject": "head",
          "template": {
            "filePath": {
              "__evaluate__": "`${Tools.isFileSync(path.resolve(self.path.source.base, 'playground.html.ejs')) ? path.resolve(self.path.source.base, 'playground.html.ejs') : path.resolve(webOptimizerPath, 'index.html.ejs')}`"
            }
          }
        },
        "html": {
          "__evaluate__": "2 < self.givenCommandLineArguments.length && ['test:browser', 'serve'].includes(self.givenCommandLineArguments[2]) ? [{}] : []"
        }
      },
      "injection": {
        "chunks": {
          "cacheGroups": {
            "default": false,
            "defaultVendors": false
          }
        },
        "entry": "__auto__"
      },
      "inPlace": {
        "externalLibrary": {
          "normal": {
            "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve'"
          }
        },
        "otherMaximumFileSizeLimitInByte": 1
      },
      "libraryName": {
        "__evaluate__": "2 < self.givenCommandLineArguments.length && self.givenCommandLineArguments[2] === 'serve' ? [Tools.stringConvertToValidVariableName(self.name), '[name]'] : '*'"
      },
      "offline": null,
      "path": {
        "source": {
          "asset": {
            "cascadingStyleSheet": "./",
            "javaScript": "./",
            "image": "./",
            "template": "./",
            "data": "./"
          },
          "base": "./"
        },
        "target": {
          "asset": {
            "cascadingStyleSheet": "./",
            "javaScript": "./",
            "image": "./",
            "template": "./",
            "data": "./"
          },
          "base": "./"
        }
      },
      "test": {
        "injection": {
          "entry": {
            "testBundle": "./test"
          }
        }
      },
      "test:browser": {
        "injection": {
          "entry": {
            "testBundle": "./test"
          }
        }
      },
      "webpack": {
        "watchOptions": {
          "ignored": [
            "./*.js",
            "**/node_modules",
            "**/package.json",
            {
              "__evaluate__": "path.resolve(self.path.target.base, '*.js')"
            }
          ]
        }
      }
    }
  },
  "eslintConfig": {
    "env": {
      "browser": true,
      "node": true,
      "jest": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:@typescript-eslint/eslint-recommended",
      "plugin:@typescript-eslint/recommended",
      "plugin:@typescript-eslint/recommended-requiring-type-checking",
      "google"
    ],
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true
      },
      "ecmaVersion": "latest",
      "impliedStrict": true,
      "project": "node_modules/weboptimizer/tsconfigLibrary.json",
      "sourceType": "module"
    },
    "parser": "@typescript-eslint/parser",
    "plugins": [
      "jsdoc",
      "@typescript-eslint"
    ],
    "rules": {
      "@typescript-eslint/no-non-null-assertion": 0,
      "@typescript-eslint/type-annotation-spacing": [
        "error",
        {
          "after": false,
          "before": false,
          "overrides": {
            "arrow": {
              "after": true,
              "before": true
            }
          }
        }
      ],
      "arrow-parens": [
        "error",
        "always"
      ],
      "block-scoped-var": 0,
      "camelcase": [
        "error",
        {
          "properties": "always"
        }
      ],
      "comma-dangle": [
        "error",
        "never"
      ],
      "curly": [
        "error",
        "multi"
      ],
      "indent": [
        "error",
        4,
        {
          "ignoreComments": true
        }
      ],
      "max-nested-callbacks": [
        "error",
        10
      ],
      "no-invalid-this": 0,
      "no-unused-vars": [
        "error",
        {
          "argsIgnorePattern": "^_"
        }
      ],
      "new-cap": 0,
      "no-constant-condition": 0,
      "no-new-func": 0,
      "no-new-wrappers": 0,
      "quote-props": [
        "error",
        "as-needed",
        {
          "numbers": true
        }
      ],
      "require-jsdoc": [
        "error",
        {
          "require": {
            "FunctionDeclaration": true,
            "MethodDefinition": true,
            "ClassDeclaration": true
          }
        }
      ],
      "semi": [
        "error",
        "never"
      ],
      "space-before-function-paren": [
        "error",
        {
          "anonymous": "never",
          "asyncArrow": "always",
          "named": "never"
        }
      ],
      "spaced-comment": [
        "error",
        "always",
        {
          "line": {
            "exceptions": [
              "/usr/bin/env node"
            ]
          }
        }
      ],
      "space-infix-ops": 0,
      "valid-jsdoc": [
        0,
        {
          "prefer": {
            "return": "returns"
          },
          "requireParamDescription": false,
          "requireReturnDescription": true,
          "requireReturnType": false
        }
      ],
      "jsdoc/check-param-names": "error",
      "jsdoc/check-tag-names": "error",
      "jsdoc/newline-after-description": [
        "error",
        "never"
      ],
      "jsdoc/require-description-complete-sentence": "error",
      "jsdoc/require-hyphen-before-param-description": "error",
      "jsdoc/require-param": "error",
      "jsdoc/require-param-description": "error",
      "jsdoc/require-param-type": 0,
      "jsdoc/require-returns-description": "error",
      "jsdoc/require-returns-type": 0
    }
  }
}
